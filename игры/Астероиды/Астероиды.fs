#if INTERACTIVE
#r "./bin/debug/Xwt.dll"
#r "./bin/debug/FunSharp.dll"
#endif

открыть Библиотека

// Asteroids Game
// Copyright (C) 2009, Jason T. Jacques 
// License: MIT license http://www.opensource.org/licenses/mit-license.php

// Game area controls
пусть ширинаИгры  = 640.0
пусть высотаИгры = 480.0
пусть цветФона = Цвета.Black

// Window title
пусть заголовокИгры = "Астероиды, Счет: "

// Target frames per second
пусть fps = 25

// Управление кнопками
пусть кнопкаЛево  = "Left"
пусть кнопкаПраво = "Right"
пусть КнопкаВперед = "Up"
пусть кнопкаНазад = "Down"
пусть кнопкаОгонь = "Space"
пусть кнопкаПауза = "P"

// Asteroid (rock) settings
пусть скоростьАстероидов = 1.0
пусть цветАстероидов = Цвета.White
пусть минАстероид = 20 // small size rock
пусть типыАстероидов = 3 // number of rock sizes (multiples of small rock size)
пусть изменяемый иницАстероиды = 5

// Ammo settings
пусть скоростьПули = 5.0
пусть цветПули = Цвета.White
пусть жизньПули = 60 // moves before auto destruct
пусть максПули = 10
пусть размерПули = 5.0

// Player settings
пусть цветИгрока = Цвета.White
пусть высотаИгрока = 30.0
пусть ширинаИгрока = 20.0
пусть изменяемый игрок = ""
пусть изменяемый уголИгрока = 0.0
пусть изменяемый скоростьИгрока = 0.0
пусть безопасноеВремя = 100 // time player has to get out of the way on level up

// Point multiplier
пусть мультипликаторОчков = 10

// Array name initialisation
пусть астероид = ResizeArray()
пусть уголАстероида = ResizeArray()
пусть размерАстероида = ResizeArray()
пусть пуля = ResizeArray()
пусть уголПули = ResizeArray<float>()
пусть возрастПули = ResizeArray()

пусть изменяемый количествоАстероидов = 0
пусть изменяемый количествоПуль = 0

пусть путь = "" // "http://smallbasic.com/drop/"
пусть большойАстероид = СписокИзображений.ЗагрузитьИзображение(путь + "Asteroids_BigRock.png")
пусть среднийАстероид = СписокИзображений.ЗагрузитьИзображение(путь + "Asteroids_MediumRock.png")
пусть малАстероид = СписокИзображений.ЗагрузитьИзображение(путь + "Asteroids_SmallRock.png")
пусть фон = СписокИзображений.ЗагрузитьИзображение(путь + "Asteroids_Sky.png")

пусть изменяемый пауза = 0
пусть изменяемый игра = 0
пусть изменяемый безопасностьИгрока = 0
пусть изменяемый счет = 0

пусть изменяемый следующийРазмер = 0
пусть изменяемый следующаяПозиция = ""
пусть изменяемый px1 = 0.0
пусть изменяемый py1 = 0.0
пусть изменяемый px2 = 0.0
пусть изменяемый py2 = 0.0

// Настроить мир
пусть рек Инициализация () =
   ГрафическоеОкно.Спрятать()
   ГрафическоеОкно.Заголовок <- заголовокИгры + "0"
   //GraphicsWindow.CanResize <- "False"
   ГрафическоеОкно.Ширина <- int ширинаИгры
   ГрафическоеОкно.Высота <-int высотаИгры

   ГрафическоеОкно.ЦветФона <- цветФона
   ГрафическоеОкно.ЦветКисти <- цветФона
   ГрафическоеОкно.НарисоватьИзображение(фон, 0, 0)

   ПроверкаУровня()

   ГрафическоеОкно.ЦветПера <- цветИгрока
   игрок <- Фигуры.ДобавитьИзображение(путь + "Asteroids_Ship.png")
   // player = Фигуры.AddTriangle(playerWidth/2, 0, 0, playerHeight, playerWidth, playerHeight)
   Фигуры.Переместить(игрок, (ширинаИгры - ширинаИгрока) / 2.0, (float высотаИгры - высотаИгрока) / 2.0)
   уголИгрока <- 0.0

// Главная игровая процедура
и Игра () =
   ГрафическоеОкно.Показать()
   ГрафическоеОкно.КнопкаНажата <- Callback(ИзменитьНаправление)

   // Main loop
   игра <- 1
   пауза <- 0
   пока (игра = 1) сделать
     Программа.Задержка(1000/fps)
     если (пауза = 0) тогда
       Движение()
       ПроверкаСтолкновений()
       УстареваниеПуль()
       ПроверкаУровня()

// Read key event and act
и ИзменитьНаправление () =   
   если (ГрафическоеОкно.ПоследняяКнопка = кнопкаПраво) тогда
     уголИгрока <- (уголИгрока + 10.0) % 360.0
   инесли (ГрафическоеОкно.ПоследняяКнопка = кнопкаЛево) тогда
     уголИгрока <- (уголИгрока - 10.0) % 360.0
   инесли (ГрафическоеОкно.ПоследняяКнопка = КнопкаВперед) тогда
     скоростьИгрока <- скоростьИгрока + 1.0
   инесли (ГрафическоеОкно.ПоследняяКнопка = кнопкаНазад) тогда
     скоростьИгрока <- скоростьИгрока - 1.0
   инесли (ГрафическоеОкно.ПоследняяКнопка = кнопкаОгонь) тогда
     Выстрел()
   инесли (ГрафическоеОкно.ПоследняяКнопка = кнопкаПауза) тогда
     пауза <- Математика.Остаток(пауза + 1, 2)  
   Фигуры.Повернуть(игрок, уголИгрока)

// Move all on screen items
и Движение  () =
   // Move player
   пусть x = Математика.Остаток(Фигуры.ПолучитьЛево(игрок) + (Математика.Кос(Математика.ВзятьРадианы(уголИгрока - 90.0)) * скоростьИгрока) + ширинаИгры, ширинаИгры)
   пусть y = Математика.Остаток(Фигуры.ПолучитьВерх(игрок) + (Математика.Син(Математика.ВзятьРадианы(уголИгрока - 90.0)) * скоростьИгрока) + высотаИгры, высотаИгры)
   Фигуры.Переместить(игрок, x, y)

   // Move rocks
   для i = 0 до количествоАстероидов-1 сделать
     пусть x = Математика.Остаток(Фигуры.ПолучитьЛево(астероид.[i]) + (Математика.Кос(Математика.ВзятьРадианы(уголАстероида.[i] - 90.0)) * скоростьАстероидов) + ширинаИгры, ширинаИгры)
     пусть y = Математика.Остаток(Фигуры.ПолучитьВерх(астероид.[i]) + (Математика.Син(Математика.ВзятьРадианы(уголАстероида.[i] - 90.0)) * скоростьАстероидов) + высотаИгры, высотаИгры)
     Фигуры.Переместить(астероид.[i], x, y)

   // Move ammo
   для i = 0 до количествоПуль-1 сделать
     пусть x = Математика.Остаток(Фигуры.ПолучитьЛево(пуля.[i]) + (Математика.Кос(Математика.ВзятьРадианы(уголПули.[i] - 90.0)) * скоростьПули) + ширинаИгры, ширинаИгры)
     пусть y = Математика.Остаток(Фигуры.ПолучитьВерх(пуля.[i]) + (Математика.Син(Математика.ВзятьРадианы(уголПули.[i] - 90.0)) * скоростьПули) + высотаИгры, высотаИгры)
     Фигуры.Переместить(пуля.[i], x, y)
     возрастПули.[i] <- возрастПули.[i] + 1

// Check for collisions between onscreen items
и ПроверкаСтолкновений () =
   // Calculate player bounding box.
   px1 <- Фигуры.ПолучитьЛево(игрок) - ( (Математика.Модуль(ширинаИгрока * Математика.Кос(Математика.ВзятьРадианы(уголИгрока)) + высотаИгрока * Математика.Син(Математика.ВзятьРадианы(уголИгрока))) - ширинаИгрока) / 2.0)
   py1 <- Фигуры.ПолучитьВерх(игрок) - ( (Математика.Модуль(ширинаИгрока * Математика.Син(Математика.ВзятьРадианы(уголИгрока)) + высотаИгрока * Математика.Кос(Математика.ВзятьРадианы(уголИгрока))) - высотаИгрока) / 2.0)
   px2 <- px1 + Математика.Модуль(ширинаИгрока * Математика.Кос(Математика.ВзятьРадианы(уголИгрока)) + высотаИгрока * Математика.Син(Математика.ВзятьРадианы(уголИгрока)))
   py2 <- py1 + Математика.Модуль(ширинаИгрока * Математика.Син(Математика.ВзятьРадианы(уголИгрока)) + высотаИгрока * Математика.Кос(Математика.ВзятьРадианы(уголИгрока)))

   // Re-order co-oridinates if they are the wrong way arround
   если (px1 > px2) тогда
     пусть tmp = px1
     px1 <- px2
     px2 <- tmp  
   если (py1 > py2) тогда
     пусть tmp = py1
     py1 <- py2
     py2 <- tmp 

   пусть астероидыКУдалению = ResizeArray()
   пусть пулиКУдалению = ResizeArray()
   // Check if each rock has hit something
   для i = 0 до количествоАстероидов-1 сделать
     пусть ax1 = Фигуры.ПолучитьЛево(астероид.[i])
     пусть ay1 = Фигуры.ПолучитьВерх(астероид.[i])
     пусть ax2 = ax1 + float размерАстероида.[i]
     пусть ay2 = ay1 + float размерАстероида.[i]

     // Player collison
     если (безопасностьИгрока < 1) тогда
       если ( (ax1 < px1 && ax2 > px1) || (ax1 < px2 && ax2 > px2) ) тогда
         если ( (ay1 < py1 && ay2 > py1) || (ay1 < py2 && ay2 > py2) ) тогда
           КонецИгры()

     // Ammo collison
     для j в 0..количествоПуль-1 сделать          
         пусть bx1 = Фигуры.ПолучитьЛево(пуля.[j])
         пусть by1 = Фигуры.ПолучитьВерх(пуля.[j])
         пусть bx2 = bx1 + размерПули
         пусть by2 = by1 + размерПули

         если ( (ax1 < bx1 && ax2 > bx1) || (ax1 < bx2 && ax2 > bx2) ) тогда
            если ( (ay1 < by1 && ay2 > by1) || (ay1 < by2 && ay2 > by2) ) тогда           
               астероидыКУдалению.Add(i)
               пулиКУдалению.Add(j)

   для i в астероидыКУдалению |> Seq.distinct |> List.ofSeq |> List.rev сделать
      УдалитьАстероид i
   для j в пулиКУдалению |> Seq.distinct |> List.ofSeq |> List.rev сделать
      УдалитьПулю j

   // Decrease the time player is safe
   если (безопасностьИгрока > 0) тогда
     безопасностьИгрока <- безопасностьИгрока - 1   

// Add a new rock to the world
и ДобавитьАстероид () =
   // Check if the next rock size/position has been specified   
   пусть размер,x,y =
      если (следующийРазмер <> 0) тогда
         пусть размер = минАстероид * следующийРазмер
         пусть x = Фигуры.ПолучитьЛево(следующаяПозиция)
         пусть y = Фигуры.ПолучитьВерх(следующаяПозиция)
         следующийРазмер <- 0
         размер,x,y
      иначе
         // Choose a random size and position
         пусть размер = минАстероид * Математика.ВзятьСлучайноеЧисло(типыАстероидов)
         пусть x = Математика.ВзятьСлучайноеЧисло(int ширинаИгры - размер)
         пусть y = Математика.ВзятьСлучайноеЧисло(int высотаИгры - размер)
         размер,float x,float y
   // Draw the rock
   ГрафическоеОкно.ЦветПера <- цветАстероидов
   пусть изображение =
      если размер = 60 тогда большойАстероид
      инесли размер = 40 тогда среднийАстероид
      иначе малАстероид
   астероид.Add(Фигуры.ДобавитьИзображение(изображение))
   //Фигуры.Zoom(rock.[rockCount],1.0,1.0)
   Фигуры.Переместить(астероид.[количествоАстероидов], x, y)
   уголАстероида.Add(float (Математика.ВзятьСлучайноеЧисло(360)))
   размерАстероида.Add(размер)
   количествоАстероидов <- количествоАстероидов + 1

// Удалить камень из мира и обновить счет
и УдалитьАстероид следующийУдаляемый =
   пусть изменяемый удаляемыйРазмер = размерАстероида.[следующийУдаляемый] / минАстероид

   // Если не мини-кемень
   если (удаляемыйРазмер > 1) тогда
     // ... добавить новые камни пока не скомпенсируем то что он был разломан на части...
     пока (удаляемыйРазмер > 0) сделать
       следующийРазмер <- Математика.ВзятьСлучайноеЧисло(удаляемыйРазмер - 1)
       следующаяПозиция <- астероид.[следующийУдаляемый]
       удаляемыйРазмер <- удаляемыйРазмер - следующийРазмер
       ДобавитьАстероид ()
     // И добавим очк за 'попадание'
     счет <- счет + 1
   иначе
     // Мы уничтожили его - дадим несколько дополнительный очков и
     счет <- счет + 5   

   // Покажем обновленный счет
   ГрафическоеОкно.Заголовок <- заголовокИгры + (счет * мультипликаторОчков).ToString()

   // Удалим все связи из массивов
   Фигуры.Удалить(астероид.[следующийУдаляемый])
      
   астероид.RemoveAt(следующийУдаляемый)
   уголАстероида.RemoveAt(следующийУдаляемый)
   размерАстероида.RemoveAt(следующийУдаляемый)
   количествоАстероидов <- количествоАстероидов - 1

// Проверим если игрок закончил уровень, если так, поднимаем уровень
и ПроверкаУровня () =
   если (количествоАстероидов < 1) тогда
     следующийРазмер <- 0
     для i = 1 до иницАстероиды сделать
       ДобавитьАстероид()     
     иницАстероиды <- иницАстероиды + 1
     // Дадим игроку некоторое время чтобы уйти с дороги
     безопасностьИгрока <- безопасноеВремя   

// Добавить снаряды в игру
и Выстрел () =
   // Удалить дополнительные снаряды
   пока (количествоПуль > (максПули - 1)) сделать     
     УдалитьПулю 0
   // Добавить снаряды
   ГрафическоеОкно.ЦветПера <- цветПули   
   пуля.Add(Фигуры.ДобавитьЭллипс(размерПули, размерПули))
   Фигуры.Переместить(пуля.[количествоПуль], (px1 + px2 - размерПули) / 2.0, (py1 + py2 - размерПули) / 2.0)
   уголПули.Add(уголИгрока)
   возрастПули.Add(0)
   количествоПуль <- количествоПуль + 1

// Check ammo age
и УстареваниеПуль () =
   пока возрастПули.Count > 0 && (возрастПули.[0] > жизньПули) сделать     
      УдалитьПулю 0

// Remove top Ammo
и УдалитьПулю следующийУдаляемый =
   Фигуры.Удалить(пуля.[следующийУдаляемый])
   пуля.RemoveAt(следующийУдаляемый)
   уголПули.RemoveAt(следующийУдаляемый)
   возрастПули.RemoveAt(следующийУдаляемый)
   количествоПуль <- количествоПуль - 1
   
// Display simple end game message box
и КонецИгры () =
   игра <- 0
   Фигуры.Удалить(игрок)
   ГрафическоеОкно.ПоказатьСообщение("Ваш счет " + (счет * мультипликаторОчков).ToString() + " очков. Спасибо за игру.", "Игра окончена!")

// Start game
Инициализация()
Игра()
